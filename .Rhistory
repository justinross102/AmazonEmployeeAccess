sample(names, 1, replace = F)
sample(names, 1, replace = F)
sample(names, 1, replace = F)
sample(names, 1, replace = F)
sample(names, 1, replace = F)
sample(names, 1, replace = F)
sample(names, 1, replace = F)
sample(names, 1, replace = F)
names <- c("Brian", "Lucy", "Allison", "Autumn", "Justin", "Connor")
names <- c("Brian", "Lucy", "Allison", "Autumn", "Justin", "Connor")
sample(names, 1, replace = F)
sample(names, 1, replace = F)
sample(names, 1, replace = F)
sample(names, 1, replace = F)
sample(names, 1, replace = F)
sample(names, 1, replace = F)
sample(names, 6, replace = F)
sample(names, 6, replace = F)
sample(names, 6, replace = F)
sample(names, 6, replace = F)
sample(names, 6, replace = F)
sample(names, 6, replace = F)
sample(names, 6, replace = F)
sample(names, 6, replace = F)
sample(names, 6, replace = F)
sample(names, 6, replace = T)
sample(names, 6, replace = T)
sample(names, 6, replace = T)
sample(names, 6, replace = T)
sample(names, 6, replace = T)
library(nycflights13)
install.packages('nycflights13')
library(nycflights13)
flights
weather
view(weather)
library(tidyverse)
flights
view(weather)
weather
head(weather, 26)
head(weather) %>%
print(26)
print(weather, n=26)
weather %>%
filter(precip != 0)
weather %>%
filter(precip != 0) %>%
unique(day)
weather %>%
filter(precip != 0) %>%
unique(day)
weather %>%
filter(precip != 0) %>%
select(day) %>%
unique()
View(weather %>%
filter(precip != 0) %>%
select(day) %>%
unique())
view(weather)
View(weather %>%
filter(precip != 0) %>%
select(origin, day, time_hour) %>%
unique())
View(weather %>%
filter(precip != 0) %>%
select(origin, day, time_hour) %>%
group_by(day))
View(weather %>%
filter(precip != 0) %>%
select(origin, day, time_hour) %>%
group_by(day) %>%
unique())
View(weather %>%
filter(precip != 0) %>%
select(day) %>%
unique())
library(tidyverse)
library(rvest)
library(vroom)
library(patchwork)
get_html_table <- function(url, index, header = T){
df <- url %>%
read_html() %>%
html_elements("table") %>%
html_table(header=header) %>%
.[[index]]
colnames(df) <- make.names(colnames(df))
df
}
website = "https://www.baseball-reference.com/teams/PHI/2023-schedule-scores.shtml"
phillies_wins <- get_html_table(website, 1)
# change col names
colnames(phillies_wins) <- c("Game", "Date", "boxscore", "Team", "Home", "Opp", "W_or_L", "R", "RA", "Inn", "W_L", "Rank",
"GB", "Win", "Loss", "Save", "Time", "D_N", "Attendance", "cLI", "Streak", "Orig_Scheduled")
phillies_games <- phillies_wins %>%
filter(Game != "Gm#", # get rid of monthly headers
boxscore != "preview") %>%# get rid of games that haven't been played yet
mutate(Home = if_else(Home == "@", "Away", "Home"),
Save = if_else(Save == "", NA, Save),
R = as.numeric(R),
RA = as.numeric(RA),
Rank = as.numeric(Rank),
GB = as.numeric(GB),
D_N = if_else(D_N == "D", "Day", "Night"),
Date = as.Date(Date, format = "%A, %b %d"),
Attendance = as.numeric(gsub(",", "", Attendance))) %>%
na.omit() %>%
select(-c(1, 3, 10, 20, 21, 22))
colnames(phillies_games)
boxplot <- phillies_games %>%
ggplot(mapping = aes(Home, R)) +
geom_boxplot() +
labs(title = "Runs Scored by the Phillies in Home and Away Games",
x = "Location",
y = "Runs") +
theme(aspect.ratio = 1)
boxplot_2 <- phillies_games %>%
ggplot(mapping = aes(Home, R, fill = D_N)) +
geom_boxplot() +
labs(title = "Runs Scored by the Phillies in Home and Away Games",
subtitle = "Distribution of Runs in Day and Night Games",
x = "Location",
y = "Runs",
fill = "Time of Game") +
theme(aspect.ratio = 1) +
coord_flip()
phillies_games %>%
ggplot(mapping = aes(x = D_N, y = R)) +
geom_boxplot()
basic_scatter <- ggplot(data = phillies_games, mapping = aes(x = Date, y = Attendance)) +
geom_point()
basic_colors <- ggplot(data = phillies_games, mapping = aes(x = Date, y = Attendance, color = Home)) +
geom_point()
attendance_scatter <- phillies_games %>%
ggplot(mapping = aes(Date, Attendance, color = Home)) +
geom_point() +
labs(title = "Phillies Attendance Throughout the 2023 Season",
color = "Location") +
theme(aspect.ratio = 1)
two_plots <- attendance_scatter + boxplot_2
phillies_games %>%
filter(Attendance)
phillies_games %>%
order_by(Attendance)
phillies_games %>%
arrange(., Attendance)
phillies_games %>%
arrange(Attendance)
setwd("~/Documents/BYU/stat348/AmazonEmployeeAccess")
# load libraries ----------------------------------------------------------
library(tidyverse)
library(tidymodels)
library(vroom)
library(embed) # for target encoding
library(ggmosaic)
# load in data ------------------------------------------------------------
train <- vroom("./train.csv")
test <- vroom("./test.csv")
my_recipe <- recipe(ACTION ~ ., data = train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .01) %>%  # combines categorical values that occur <1% into an "other" value
step_dummy(all_nominal_predictors()) # dummy variable encoding
logistic_mod <- logistic_reg() %>%
set_engine("glm")
logistic_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(logistic_mod) %>%
fit(data = train) # Fit the workflow
# apply the recipe to the data
prepped_recipe <- prep(my_recipe)
baked <- bake(prepped_recipe, new_data = train) # should have 112 columns
baked
logistic_mod <- logistic_reg() %>%
set_engine("glm")
logistic_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(logistic_mod) %>%
fit(data = train) # Fit the workflow
my_recipe <- recipe(ACTION ~ ., data = train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .01) %>%  # combines categorical values that occur <1% into an "other" value
step_dummy(all_nominal_predictors()) %>%  # dummy variable encoding
step_num2factor(all_nominal_predictors())
my_recipe <- recipe(ACTION ~ ., data = train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .01) %>%  # combines categorical values that occur <1% into an "other" value
step_dummy(all_nominal_predictors()) %>%  # dummy variable encoding
step_num2factor(ACTION, levels = c('no', 'yes'))
# apply the recipe to the data
prepped_recipe <- prep(my_recipe)
baked
logistic_mod <- logistic_reg() %>%
set_engine("glm")
logistic_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(logistic_mod) %>%
fit(data = train) # Fit the workflow
my_recipe <- recipe(ACTION ~ ., data = train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .01) %>%  # combines categorical values that occur <1% into an "other" value
step_dummy(all_nominal_predictors())  # dummy variable encoding
# apply the recipe to the data
prepped_recipe <- prep(my_recipe)
baked <- bake(prepped_recipe, new_data = train) # should have 112 columns
baked
test %>%
select(-1)
train
# load in data ------------------------------------------------------------
train <- vroom("./train.csv")
test <- vroom("./test.csv") %>%
select(-1)
my_recipe <- recipe(ACTION ~ ., data = train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .01) %>%  # combines categorical values that occur <1% into an "other" value
step_dummy(all_nominal_predictors())  # dummy variable encoding
# apply the recipe to the data
prepped_recipe <- prep(my_recipe)
baked <- bake(prepped_recipe, new_data = train) # should have 112 columns
baked
bake(prepped_recipe, new_data = test)
logistic_mod <- logistic_reg() %>%
set_engine("glm")
logistic_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(logistic_mod) %>%
fit(data = train) # Fit the workflow
amazon_predictions <- predict(logistic_workflow,
new_data = test,
type = "prob") # "class" or "prob" (see doc)
logistic_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(logistic_mod) %>%
fit(data = train) # Fit the workflow
my_recipe <- recipe(ACTION ~ ., data = train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .01) %>%  # combines categorical values that occur <1% into an "other" value
step_dummy(all_nominal_predictors())  # dummy variable encoding
# apply the recipe to the data
prepped_recipe <- prep(my_recipe)
baked <- bake(prepped_recipe, new_data = train) # should have 112 columns
baked
logistic_mod <- logistic_reg() %>%
set_engine("glm")
logistic_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(logistic_mod) %>%
fit(data = train) # Fit the workflow
my_recipe <- recipe(ACTION ~ ., data = train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .01) %>%  # combines categorical values that occur <1% into an "other" value
step_dummy(all_nominal_predictors()) %>%  # dummy variable encoding
step_num2factor(all_outcomes())
my_recipe <- recipe(ACTION ~ ., data = train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .01) %>%  # combines categorical values that occur <1% into an "other" value
step_dummy(all_nominal_predictors()) %>%  # dummy variable encoding
step_num2factor(all_nominal_predictors(), c('no', 'yes'))
my_recipe <- recipe(ACTION ~ ., data = train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .01) %>%  # combines categorical values that occur <1% into an "other" value
step_dummy(all_nominal_predictors()) %>%  # dummy variable encoding
step_num2factor(ACTION, c('no', 'yes'))
# apply the recipe to the data
prepped_recipe <- prep(my_recipe)
baked <- bake(prepped_recipe, new_data = train) # should have 112 columns
baked
my_recipe <- recipe(ACTION ~ ., data = train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .01) %>%  # combines categorical values that occur <1% into an "other" value
step_dummy(all_nominal_predictors()) %>%  # dummy variable encoding
step_num2factor(ACTION, c('no', 'yes'))
my_recipe <- recipe(ACTION ~ ., data = train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .01) %>%  # combines categorical values that occur <1% into an "other" value
step_dummy(all_nominal_predictors()) %>%  # dummy variable encoding
step_mutate(ACTION, fn = factor, levels = c('no', 'yes'))
# apply the recipe to the data
prepped_recipe <- prep(my_recipe)
my_recipe <- recipe(ACTION ~ ., data = train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .01) %>%  # combines categorical values that occur <1% into an "other" value
step_dummy(all_nominal_predictors()) %>%  # dummy variable encoding
step_mutate(ACTION, fn = factor, levels = c('no', 'yes'))
logistic_mod <- logistic_reg() %>%
set_engine("glm")
logistic_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(logistic_mod) %>%
fit(data = train) # Fit the workflow
my_recipe <- recipe(ACTION ~ ., data = train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .01) %>%  # combines categorical values that occur <1% into an "other" value
step_dummy(all_nominal_predictors()) %>%  # dummy variable encoding
step_mutate_at(vars(ACTION), fn = factor, levels = c('no', 'yes'))
# apply the recipe to the data
prepped_recipe <- prep(my_recipe)
my_recipe <- recipe(ACTION ~ ., data = train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .01) %>%  # combines categorical values that occur <1% into an "other" value
step_dummy(all_nominal_predictors()) %>%  # dummy variable encoding
step_mutate_at(ACTION, fn = factor, levels = c('no', 'yes'))
# apply the recipe to the data
prepped_recipe <- prep(my_recipe)
logistic_mod <- logistic_reg() %>%
set_engine("glm")
my_recipe <- recipe(ACTION ~ ., data = train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .01) %>%  # combines categorical values that occur <1% into an "other" value
step_dummy(all_nominal_predictors())  # dummy variable encoding
# apply the recipe to the data
prepped_recipe <- prep(my_recipe)
baked <- bake(prepped_recipe, new_data = train) # should have 112 columns
baked
logistic_mod <- logistic_reg() %>%
set_engine("glm")
logistic_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(logistic_mod) %>%
fit(data = train) # Fit the workflow
my_recipe <- recipe(ACTION ~ ., data = train) %>%
step_mutate(ACTION, fn = as.factor) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .01) %>%  # combines categorical values that occur <1% into an "other" value
step_dummy(all_nominal_predictors())  # dummy variable encoding
# apply the recipe to the data
prepped_recipe <- prep(my_recipe)
my_recipe <- recipe(ACTION ~ ., data = train) %>%
step_mutate(ACTION, fn = factor) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .01) %>%  # combines categorical values that occur <1% into an "other" value
step_dummy(all_nominal_predictors())  # dummy variable encoding
# apply the recipe to the data
prepped_recipe <- prep(my_recipe)
my_recipe <- recipe(ACTION ~ ., data = train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .01) %>%  # combines categorical values that occur <1% into an "other" value
step_dummy(all_nominal_predictors())  # dummy variable encoding
# apply the recipe to the data
prepped_recipe <- prep(my_recipe)
baked <- bake(prepped_recipe, new_data = train) # should have 112 columns
baked
logistic_mod <- logistic_reg() %>%
set_engine("glm")
logistic_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(logistic_mod) %>%
fit(data = train) # Fit the workflow
# load in data ------------------------------------------------------------
train <- vroom("./train.csv")
test <- vroom("./test.csv") %>%
select(-1)
# distribution of Action
train %>%
ggplot(mapping = aes(x = factor(ACTION))) +
geom_bar() +
labs(title = 'Distribution of ACTION',
x = 'ACTION',
y = 'Count')
my_recipe <- recipe(ACTION ~ ., data = train) %>%
step_mutate_at(all_numeric_predictors(), fn = as.factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .01) %>%  # combines categorical values that occur <1% into an "other" value
step_dummy(all_nominal_predictors())  # dummy variable encoding
# apply the recipe to the data
prepped_recipe <- prep(my_recipe)
baked <- bake(prepped_recipe, new_data = train) # should have 112 columns
baked
# load in data ------------------------------------------------------------
train <- vroom("./train.csv") %>%
mutate(ACTION = as.factor(ACTION))
train
test <- vroom("./test.csv") %>%
select(-1)
my_recipe <- recipe(ACTION ~ ., data = train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .01) %>%  # combines categorical values that occur <1% into an "other" value
step_dummy(all_nominal_predictors())  # dummy variable encoding
logistic_mod <- logistic_reg() %>%
set_engine("glm")
logistic_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(logistic_mod) %>%
fit(data = train) # Fit the workflow
amazon_predictions <- predict(logistic_workflow,
new_data = test,
type = "class") # "class" or "prob"
amazon_predictions
kaggle_submission <- data.frame(Index = seq_along(amazon_predictions), amazon_predictions)
kaggle_submission
kaggle_submission <- tibble(Index = seq_along(amazon_predictions), amazon_predictions)
kaggle_submission
kaggle_submission <- amazon_predictions %>%
mutate(Index = row_number())
kaggle_submission
kaggle_submission <- amazon_predictions %>%
mutate(Index = row_number(),
.pred_class = 'Id') %>%
select(2,1)
kaggle_submission
kaggle_submission <- amazon_predictions %>%
mutate(Id = row_number()) %>%
select(2,1)
kaggle_submission
amazon_predictions <- predict(logistic_workflow,
new_data = test,
type = "class") # "class" or "prob"
kaggle_submission <- amazon_predictions %>%
mutate(Id = row_number()) %>%
select(2,1)
kaggle_submission
kaggle_submission <- amazon_predictions %>%
mutate(Id = row_number()) %>%
rename("Action" = ".pred_class")
kaggle_submission
kaggle_submission <- amazon_predictions %>%
mutate(Id = row_number()) %>%
rename("Action" = ".pred_class") %>%
select(2,1)
kaggle_submission
logistic_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(logistic_mod) %>%
fit(data = train) # Fit the workflow
amazon_predictions <- predict(logistic_workflow,
new_data = test,
type = "class") # "class" or "prob"
kaggle_submission <- amazon_predictions %>%
mutate(Id = row_number()) %>%
rename("Action" = ".pred_class") %>%
select(2,1)
# write predictions to csv
vroom_write(x=kaggle_submission, file="./amazon_predictions.csv", delim=",")
amazon_predictions <- predict(logistic_workflow,
new_data = test,
type = "class") # "class" or "prob"
kaggle_submission <- amazon_predictions %>%
mutate(Id = row_number()) %>%
rename("Action" = ".pred_class") %>%
select(2,1)
view(kaggle_submission)
rm(list = ls())
# load libraries ----------------------------------------------------------
library(tidyverse)
library(tidymodels)
library(vroom)
library(embed) # for target encoding
library(ggmosaic)
# load in data ------------------------------------------------------------
train <- vroom("./train.csv") %>%
mutate(ACTION = as.factor(ACTION))
test <- vroom("./test.csv") %>%
select(-1)
my_recipe <- recipe(ACTION ~ ., data = train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .01) %>%  # combines categorical values that occur <1% into an "other" value
step_dummy(all_nominal_predictors())  # dummy variable encoding
logistic_mod <- logistic_reg() %>%
set_engine("glm")
logistic_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(logistic_mod) %>%
fit(data = train) # Fit the workflow
amazon_predictions <- predict(logistic_workflow,
new_data = test,
type = "prob") # "class" or "prob"
kaggle_submission <- amazon_predictions %>%
mutate(Id = row_number()) %>%
rename("Action" = ".pred_class") %>%
select(2,1)
amazon_predictions <- predict(logistic_workflow,
new_data = test,
type = "prob") # "class" or "prob"
amazon_predictions
kaggle_submission <- amazon_predictions %>%
mutate(Id = row_number()) %>%
rename("Action" = ".pred_1") %>%
select(3,1)
kaggle_submission
# write predictions to csv
vroom_write(x=kaggle_submission, file="./amazon_predictions.csv", delim=",")
kaggle_submission <- amazon_predictions %>%
mutate(Id = row_number()) %>%
rename("Action" = ".pred_1") %>%
select(2,1)
# write predictions to csv
vroom_write(x=kaggle_submission, file="./amazon_predictions.csv", delim=",")
logistic_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(logistic_mod) %>%
fit(data = train) # Fit the workflow
amazon_predictions <- predict(logistic_workflow,
new_data = test,
type = "prob") # "class" or "prob"
kaggle_submission <- amazon_predictions %>%
mutate(Id = row_number()) %>%
rename("Action" = ".pred_1")
kaggle_submission
logistic_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(logistic_mod) %>%
fit(data = train) # Fit the workflow
amazon_predictions <- predict(logistic_workflow,
new_data = test,
type = "prob") # "class" or "prob"
kaggle_submission <- amazon_predictions %>%
mutate(Id = row_number()) %>%
rename("Action" = ".pred_1") %>%
select(3,2)
# write predictions to csv
vroom_write(x=kaggle_submission, file="./amazon_predictions.csv", delim=",")
