ggplot(mapping = aes(x = D_N, y = R)) +
geom_boxplot()
phillies_games %>%
ggplot(mapping = aes(x = Date, y = Attendance)) +
geom_point()
phillies_games %>%
ggplot(mapping = aes(RA, R)) +
geom_point()
phillies_games %>%
ggplot(mapping = aes(RA, R, color = W_or_L)) +
geom_point()
phillies_games %>%
ggplot(mapping = aes(x = Home, y = R)) +
geom_boxplot()
phillies_games %>%
ggplot(mapping = aes(x = D_N, y = R)) +
geom_boxplot()
phillies_games %>%
ggplot(mapping = aes(x = Date, y = Attendance)) +
geom_point()
phillies_games %>%
ggplot(mapping = aes(x = Date, y = Attendance)) +
geom_line()
phillies_games %>%
ggplot(mapping = aes(x = Date, y = Attendance)) +
geom_histogram()
phillies_games %>%
ggplot(mapping = aes(x = Date, y = Attendance)) +
geom_point()
ggplot(data = phillies_games, mapping = aes(x = Date, y = Attendance)) +
geom_point()
ggplot(data = phillies_games, mapping = aes(x = Date, y = Attendance)) +
geom_point()
phillies_games %>%
ggplot(mapping = aes(x = Home, y = R)) +
geom_boxplot()
phillies_games %>%
ggplot(mapping = aes(x = D_N, y = R)) +
geom_boxplot()
ggplot(data = phillies_games, mapping = aes(x = Date, y = Attendance)) +
geom_point()
website = "https://www.baseball-reference.com/teams/PHI/2023-schedule-scores.shtml"
phillies_wins <- get_html_table(website, 1)
# change col names
colnames(phillies_wins) <- c("Game", "Date", "boxscore", "Team", "Home", "Opp", "W_or_L", "R", "RA", "Inn", "W_L", "Rank",
"GB", "Win", "Loss", "Save", "Time", "D_N", "Attendance", "cLI", "Streak", "Orig_Scheduled")
phillies_games <- phillies_wins %>%
filter(Game != "Gm#", # get rid of monthly headers
boxscore != "preview") %>%# get rid of games that haven't been played yet
mutate(Home = if_else(Home == "@", "Away", "Home"),
Save = if_else(Save == "", NA, Save),
R = as.numeric(R),
RA = as.numeric(RA),
Rank = as.numeric(Rank),
GB = as.numeric(GB),
D_N = if_else(D_N == "D", "Day", "Night"),
Date = as.Date(Date, format = "%A, %b %d"),
Attendance = as.numeric(gsub(",", "", Attendance))) %>%
select(-c(1, 3, 10, 20, 21, 22))
phillies_games %>%
ggplot(mapping = aes(x = Home, y = R)) +
geom_boxplot()
phillies_games %>%
ggplot(mapping = aes(x = D_N, y = R)) +
geom_boxplot()
ggplot(data = phillies_games, mapping = aes(x = Date, y = Attendance)) +
geom_point()
phillies_games <- phillies_wins %>%
filter(Game != "Gm#", # get rid of monthly headers
boxscore != "preview") %>%# get rid of games that haven't been played yet
mutate(Home = if_else(Home == "@", "Away", "Home"),
Save = if_else(Save == "", NA, Save),
R = as.numeric(R),
RA = as.numeric(RA),
Rank = as.numeric(Rank),
GB = as.numeric(GB),
D_N = if_else(D_N == "D", "Day", "Night"),
Date = as.Date(Date, format = "%A, %b %d"),
Attendance = as.numeric(gsub(",", "", Attendance))) %>%
filter(rm(NA == T)) %>%
select(-c(1, 3, 10, 20, 21, 22))
phillies_games <- phillies_wins %>%
filter(Game != "Gm#", # get rid of monthly headers
boxscore != "preview") %>%# get rid of games that haven't been played yet
mutate(Home = if_else(Home == "@", "Away", "Home"),
Save = if_else(Save == "", NA, Save),
R = as.numeric(R),
RA = as.numeric(RA),
Rank = as.numeric(Rank),
GB = as.numeric(GB),
D_N = if_else(D_N == "D", "Day", "Night"),
Date = as.Date(Date, format = "%A, %b %d"),
Attendance = as.numeric(gsub(",", "", Attendance))) %>%
na.omit() %>%
select(-c(1, 3, 10, 20, 21, 22))
colnames(phillies_games)
phillies_games %>%
ggplot(mapping = aes(x = Home, y = R)) +
geom_boxplot()
phillies_games %>%
ggplot(mapping = aes(x = D_N, y = R)) +
geom_boxplot()
ggplot(data = phillies_games, mapping = aes(x = Date, y = Attendance)) +
geom_point()
vroom_write(x=phillies_games, file="./phillies_games_2023.csv", delim=",")
ggsave("basic_plot.jpg", basic_scatter)
basic_scatter <- ggplot(data = phillies_games, mapping = aes(x = Date, y = Attendance)) +
geom_point()
ggsave("basic_plot.jpg", basic_scatter)
getwd()
ggplot(data = phillies_games, mapping = aes(x = Date, y = Attendance, color = Home)) +
geom_point()
ggplot(data = phillies_games, mapping = aes(x = Date, y = Attendance, fill = Home)) +
geom_point() +
labs(title = "Phillies Attendance Throughout the Season")
ggplot(data = phillies_games, mapping = aes(x = Date, y = Attendance, color = Home)) +
geom_point() +
labs(title = "Phillies Attendance Throughout the Season")
ggplot(data = phillies_games, mapping = aes(x = Date, y = Attendance, color = Home)) +
geom_point() +
labs(title = "Phillies Attendance Throughout the 2023 Season")
ggplot(data = phillies_games, mapping = aes(x = Date, y = Attendance, color = Home)) +
geom_point() +
labs(title = "Phillies Attendance Throughout the 2023 Season",
legend = "")
ggplot(data = phillies_games, mapping = aes(x = Date, y = Attendance, color = Home)) +
geom_point() +
labs(title = "Phillies Attendance Throughout the 2023 Season",
legend = "The")
ggplot(data = phillies_games, mapping = aes(x = Date, y = Attendance, color = Home)) +
geom_point() +
labs(title = "Phillies Attendance Throughout the 2023 Season",
fill = "Location")
ggplot(data = phillies_games, mapping = aes(x = Date, y = Attendance, color = Home)) +
geom_point() +
labs(title = "Phillies Attendance Throughout the 2023 Season",
color = "Location")
ggplot(data = phillies_games, mapping = aes(x = Date, y = Attendance, color = Home)) +
geom_point()
basic_colors <- ggplot(data = your_data, mapping = aes(x = x_axis_values, y = y_axis_values)) + # specify what you are graphing
graphing_function() # the function you use here determines what your graph will be
basic_colors <- ggplot(data = phillies_games, mapping = aes(x = Date, y = Attendance, color = Home)) +
geom_point()
ggsave("basic_colors.jpg", basic_colors)
names <- c("Brian", "Lucy", "Allison", "Autumn", "Justin", "Connor")
sample(names, 1, replace = T)
sample(names, 1, replace = T)
sample(names, 1, replace = T)
sample(names, 1, replace = F)
sample(names, 1, replace = F)
sample(names, 1, replace = F)
sample(names, 1, replace = F)
sample(names, 1, replace = F)
sample(names, 1, replace = F)
sample(names, 1, replace = F)
sample(names, 1, replace = F)
sample(names, 1, replace = F)
sample(names, 1, replace = F)
sample(names, 1, replace = F)
sample(names, 1, replace = F)
names <- c("Brian", "Lucy", "Allison", "Autumn", "Justin", "Connor")
names <- c("Brian", "Lucy", "Allison", "Autumn", "Justin", "Connor")
sample(names, 1, replace = F)
sample(names, 1, replace = F)
sample(names, 1, replace = F)
sample(names, 1, replace = F)
sample(names, 1, replace = F)
sample(names, 1, replace = F)
sample(names, 6, replace = F)
sample(names, 6, replace = F)
sample(names, 6, replace = F)
sample(names, 6, replace = F)
sample(names, 6, replace = F)
sample(names, 6, replace = F)
sample(names, 6, replace = F)
sample(names, 6, replace = F)
sample(names, 6, replace = F)
sample(names, 6, replace = T)
sample(names, 6, replace = T)
sample(names, 6, replace = T)
sample(names, 6, replace = T)
sample(names, 6, replace = T)
library(nycflights13)
install.packages('nycflights13')
library(nycflights13)
flights
weather
view(weather)
library(tidyverse)
flights
view(weather)
weather
head(weather, 26)
head(weather) %>%
print(26)
print(weather, n=26)
weather %>%
filter(precip != 0)
weather %>%
filter(precip != 0) %>%
unique(day)
weather %>%
filter(precip != 0) %>%
unique(day)
weather %>%
filter(precip != 0) %>%
select(day) %>%
unique()
View(weather %>%
filter(precip != 0) %>%
select(day) %>%
unique())
view(weather)
View(weather %>%
filter(precip != 0) %>%
select(origin, day, time_hour) %>%
unique())
View(weather %>%
filter(precip != 0) %>%
select(origin, day, time_hour) %>%
group_by(day))
View(weather %>%
filter(precip != 0) %>%
select(origin, day, time_hour) %>%
group_by(day) %>%
unique())
View(weather %>%
filter(precip != 0) %>%
select(day) %>%
unique())
library(tidyverse)
library(rvest)
library(vroom)
library(patchwork)
get_html_table <- function(url, index, header = T){
df <- url %>%
read_html() %>%
html_elements("table") %>%
html_table(header=header) %>%
.[[index]]
colnames(df) <- make.names(colnames(df))
df
}
website = "https://www.baseball-reference.com/teams/PHI/2023-schedule-scores.shtml"
phillies_wins <- get_html_table(website, 1)
# change col names
colnames(phillies_wins) <- c("Game", "Date", "boxscore", "Team", "Home", "Opp", "W_or_L", "R", "RA", "Inn", "W_L", "Rank",
"GB", "Win", "Loss", "Save", "Time", "D_N", "Attendance", "cLI", "Streak", "Orig_Scheduled")
phillies_games <- phillies_wins %>%
filter(Game != "Gm#", # get rid of monthly headers
boxscore != "preview") %>%# get rid of games that haven't been played yet
mutate(Home = if_else(Home == "@", "Away", "Home"),
Save = if_else(Save == "", NA, Save),
R = as.numeric(R),
RA = as.numeric(RA),
Rank = as.numeric(Rank),
GB = as.numeric(GB),
D_N = if_else(D_N == "D", "Day", "Night"),
Date = as.Date(Date, format = "%A, %b %d"),
Attendance = as.numeric(gsub(",", "", Attendance))) %>%
na.omit() %>%
select(-c(1, 3, 10, 20, 21, 22))
colnames(phillies_games)
boxplot <- phillies_games %>%
ggplot(mapping = aes(Home, R)) +
geom_boxplot() +
labs(title = "Runs Scored by the Phillies in Home and Away Games",
x = "Location",
y = "Runs") +
theme(aspect.ratio = 1)
boxplot_2 <- phillies_games %>%
ggplot(mapping = aes(Home, R, fill = D_N)) +
geom_boxplot() +
labs(title = "Runs Scored by the Phillies in Home and Away Games",
subtitle = "Distribution of Runs in Day and Night Games",
x = "Location",
y = "Runs",
fill = "Time of Game") +
theme(aspect.ratio = 1) +
coord_flip()
phillies_games %>%
ggplot(mapping = aes(x = D_N, y = R)) +
geom_boxplot()
basic_scatter <- ggplot(data = phillies_games, mapping = aes(x = Date, y = Attendance)) +
geom_point()
basic_colors <- ggplot(data = phillies_games, mapping = aes(x = Date, y = Attendance, color = Home)) +
geom_point()
attendance_scatter <- phillies_games %>%
ggplot(mapping = aes(Date, Attendance, color = Home)) +
geom_point() +
labs(title = "Phillies Attendance Throughout the 2023 Season",
color = "Location") +
theme(aspect.ratio = 1)
two_plots <- attendance_scatter + boxplot_2
phillies_games %>%
filter(Attendance)
phillies_games %>%
order_by(Attendance)
phillies_games %>%
arrange(., Attendance)
phillies_games %>%
arrange(Attendance)
# load libraries ----------------------------------------------------------
library(tidyverse)
library(tidymodels)
library(vroom)
library(embed) # for target encoding
library(ggmosaic)
setwd("~/Documents/BYU/stat348/AmazonEmployeeAccess")
# load in data ------------------------------------------------------------
train <- vroom("./train.csv") %>%
mutate(ACTION = as.factor(ACTION))
test <- vroom("./test.csv") %>%
select(-1)
target_encoding_recipe <- recipe(ACTION ~ ., train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .001) %>%  # combines categorical values that occur <1% into an "other" value
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) # target encoding (must be 2-factor)
reg_tree_mod <- rand_forest(mtry = tune(),
min_n=tune(),
trees=500) %>% # or 1000
set_engine("ranger") %>%
set_mode("classification")
reg_tree_workflow <- workflow() %>%
add_recipe(target_encoding_recipe) %>%
add_model(reg_tree_mod)
reg_tree_tuning_grid <- grid_regular(mtry(),
min_n(),
levels = 5) ## L^2 total tuning possibilities
reg_tree_mod <- rand_forest(mtry = tune(),
min_n=tune(),
trees=500) %>% # or 1000
set_engine("ranger") %>%
set_mode("classification")
reg_tree_workflow <- workflow() %>%
add_recipe(target_encoding_recipe) %>%
add_model(reg_tree_mod)
reg_tree_tuning_grid <- grid_regular(mtry(),
min_n(),
levels = 5) ## L^2 total tuning possibilities
reg_tree_mod <- rand_forest(mtry = tune(),
min_n=tune(),
trees=500) %>% # or 1000
set_engine("ranger") %>%
set_mode("classification")
reg_tree_workflow <- workflow() %>%
add_recipe(target_encoding_recipe) %>%
add_model(reg_tree_mod)
reg_tree_tuning_grid <- grid_regular(mtry(range = c(1, (ncol(log_train)-1))),
min_n(),
levels = 5) ## L^2 total tuning possibilities
reg_tree_tuning_grid <- grid_regular(mtry(range = c(1, (ncol(train)-1))),
min_n(),
levels = 5) ## L^2 total tuning possibilities
rm(list=ls())
# load in data ------------------------------------------------------------
train <- vroom("./train.csv") %>%
mutate(ACTION = as.factor(ACTION))
test <- vroom("./test.csv") %>%
select(-1)
target_encoding_recipe <- recipe(ACTION ~ ., train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .001) %>%  # combines categorical values that occur <1% into an "other" value
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) # target encoding (must be 2-factor)
rand_forest_mod <- rand_forest(mtry = tune(),
min_n=tune(),
trees=500) %>% # or 1000
set_engine("ranger") %>%
set_mode("classification")
rand_forest_workflow <- workflow() %>%
add_recipe(target_encoding_recipe) %>%
add_model(rand_forest_mod)
rand_forest_tuning_grid <- grid_regular(mtry(range = c(1, (ncol(train)-1))),
min_n(),
levels = 5) ## L^2 total tuning possibilities
## Split data for CV
forest_folds <- vfold_cv(train, v = 5, repeats = 1)
## Split data for CV
forest_folds <- vfold_cv(train, v = 5, repeats = 1)
## Run the CV
CV_results <- rand_forest_workflow %>%
tune_grid(resamples = forest_folds,
grid = rand_forest_tuning_grid,
metrics = metric_set(roc_auc)) # f_meas, sens, recall, spec, precision, accuracy
## Find Best Tuning Parameters
forest_bestTune <- CV_results %>%
select_best("roc_auc")
forest_bestTune
## Finalize the Workflow & fit it
final_forest_wf <- rand_forest_workflow %>%
finalize_workflow(forest_bestTune) %>%
fit(data = train)
## Predict
rand_forest_predictions <- final_forest_wf %>%
predict(new_data = test,
type = "prob")
rand_forest_submission <- rand_forest_predictions %>%
mutate(Id = row_number()) %>%
rename("Action" = ".pred_1") %>%
select(3,2)
# write to csv
vroom_write(x=rand_forest_submission, file="./random_forest_predictions.csv", delim=",")
function <- kaggle_format(workflow, new_data, filename){
kaggle_format <- function(workflow, new_data, filename){
predictions <- workflow %>%
predict(new_data = new_data,
type = "prob")
submission <- predictions %>%
mutate(Id = row_number()) %>%
rename("Action" = ".pred_1") %>%
select(3,2)
vroom_write(x = submission, file = filename, delim=",")
}
predict_and_format <- function(workflow, new_data, filename){
predictions <- workflow %>%
predict(new_data = new_data,
type = "prob")
submission <- predictions %>%
mutate(Id = row_number()) %>%
rename("Action" = ".pred_1") %>%
select(3,2)
vroom_write(x = submission, file = filename, delim=",")
}
setwd("~/Documents/BYU/stat348/AmazonEmployeeAccess")
# load libraries ----------------------------------------------------------
library(tidyverse)
library(tidymodels)
library(vroom)
library(embed) # for target encoding
library(ggmosaic)
# load in data ------------------------------------------------------------
train <- vroom("./train.csv") %>%
mutate(ACTION = as.factor(ACTION))
test <- vroom("./test.csv") %>%
select(-1)
predict_and_format <- function(workflow, new_data, filename){
predictions <- workflow %>%
predict(new_data = new_data,
type = "prob")
submission <- predictions %>%
mutate(Id = row_number()) %>%
rename("Action" = ".pred_1") %>%
select(3,2)
vroom_write(x = submission, file = filename, delim=",")
}
my_recipe <- recipe(ACTION ~ ., data = train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .01) %>%  # combines categorical values that occur <1% into an "other" value
step_dummy(all_nominal_predictors())  # dummy variable encoding
logistic_mod <- logistic_reg() %>%
set_engine("glm")
logistic_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(logistic_mod) %>%
fit(data = train) # Fit the workflow
predict_and_format(logistic_workflow, test, "./amazon_predictions.csv")
predict_and_format(logistic_workflow, test, "./logistic_predictions.csv")
penalized_logistic_mod <- logistic_reg(mixture = tune(),
penalty = tune()) %>% #Type of model
set_engine("glmnet")
target_encoding_recipe <- recipe(ACTION ~ ., train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .001) %>%  # combines categorical values that occur <1% into an "other" value
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) # target encoding (must be 2-factor)
penalized_logistic_workflow <- workflow() %>%
add_recipe(target_encoding_recipe) %>%
add_model(penalized_logistic_mod)
## Grid of values to tune over
pen_tuning_grid <- grid_regular(penalty(),
mixture(),
levels = 5) ## L^2 total tuning possibilities
## Split data for CV
pen_folds <- vfold_cv(train, v = 5, repeats = 1)
## Run the CV
CV_results <- penalized_logistic_workflow %>%
tune_grid(resamples = pen_folds,
grid = pen_tuning_grid,
metrics = metric_set(roc_auc)) # f_meas, sens, recall, spec, precision, accuracy
## Find Best Tuning Parameters
pen_bestTune <- CV_results %>%
select_best("roc_auc")
## Finalize the Workflow & fit it
final_pen_wf <- penalized_logistic_workflow %>%
finalize_workflow(pen_bestTune) %>%
fit(data = train)
predict_and_format(final_pen_wf, test, "./penalized_logistic_predictions.csv")
rand_forest_mod <- rand_forest(mtry = tune(),
min_n=tune(),
trees=500) %>% # or 1000
set_engine("ranger") %>%
set_mode("classification")
rand_forest_workflow <- workflow() %>%
add_recipe(target_encoding_recipe) %>%
add_model(rand_forest_mod)
rand_forest_tuning_grid <- grid_regular(mtry(range = c(1, (ncol(train)-1))),
min_n(),
levels = 5) ## L^2 total tuning possibilities
## Split data for CV
forest_folds <- vfold_cv(train, v = 5, repeats = 1)
## Run the CV
CV_results <- rand_forest_workflow %>%
tune_grid(resamples = forest_folds,
grid = rand_forest_tuning_grid,
metrics = metric_set(roc_auc)) # f_meas, sens, recall, spec, precision, accuracy
## Find Best Tuning Parameters
forest_bestTune <- CV_results %>%
select_best("roc_auc")
## Finalize the Workflow & fit it
final_forest_wf <- rand_forest_workflow %>%
finalize_workflow(forest_bestTune) %>%
fit(data = train)
predict_and_format(final_forest_wf, test, "./random_forest_predictions.csv")
