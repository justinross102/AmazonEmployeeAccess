
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ###################################
> # Amazon Employee Access Analysis #
> ###################################
> 
> # load libraries ----------------------------------------------------------
> library(tidyverse)
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.3     ✔ readr     2.1.4
✔ forcats   1.0.0     ✔ stringr   1.5.0
✔ ggplot2   3.4.3     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.0
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
> library(tidymodels)
── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──
✔ broom        1.0.5     ✔ rsample      1.2.0
✔ dials        1.2.0     ✔ tune         1.1.2
✔ infer        1.0.5     ✔ workflows    1.1.3
✔ modeldata    1.2.0     ✔ workflowsets 1.0.1
✔ parsnip      1.1.1     ✔ yardstick    1.2.0
✔ recipes      1.0.8     
── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ scales::discard() masks purrr::discard()
✖ dplyr::filter()   masks stats::filter()
✖ recipes::fixed()  masks stringr::fixed()
✖ dplyr::lag()      masks stats::lag()
✖ yardstick::spec() masks readr::spec()
✖ recipes::step()   masks stats::step()
• Dig deeper into tidy modeling with R at https://www.tmwr.org
> library(vroom)

Attaching package: ‘vroom’

The following object is masked from ‘package:yardstick’:

    spec

The following object is masked from ‘package:scales’:

    col_factor

The following objects are masked from ‘package:readr’:

    as.col_spec, col_character, col_date, col_datetime, col_double,
    col_factor, col_guess, col_integer, col_logical, col_number,
    col_skip, col_time, cols, cols_condense, cols_only, date_names,
    date_names_lang, date_names_langs, default_locale, fwf_cols,
    fwf_empty, fwf_positions, fwf_widths, locale, output_column,
    problems, spec

> library(embed) # for target encoding
> library(discrim)

Attaching package: ‘discrim’

The following object is masked from ‘package:dials’:

    smoothness

> library(naivebayes)
naivebayes 0.9.7 loaded
> library(doParallel)
Loading required package: foreach

Attaching package: ‘foreach’

The following objects are masked from ‘package:purrr’:

    accumulate, when

Loading required package: iterators
Loading required package: parallel
> 
> cl <- makePSOCKcluster(20)
> registerDoParallel(cl)
> 
> # load in data ------------------------------------------------------------
> train <- vroom("./train.csv") %>% 
+   mutate(ACTION = as.factor(ACTION))
Rows: 32769 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): ACTION, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTN...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> test <- vroom("./test.csv") %>% 
+   select(-1)
Rows: 58921 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): id, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTNAME,...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> # functions to limit repeated code ----------------------------------------
> 
> predict_and_format <- function(workflow, new_data, filename){
+   predictions <- workflow %>%
+     predict(new_data = new_data,
+             type = "prob")
+   
+   submission <- predictions %>%
+     mutate(Id = row_number()) %>% 
+     rename("Action" = ".pred_1") %>% 
+     select(3,2)
+   
+   vroom_write(x = submission, file = filename, delim=",")
+ }
> 
> # plots -------------------------------------------------------------------
> 
> # distribution of Action
> train %>%
+   ggplot(mapping = aes(x = factor(ACTION))) + 
+   geom_bar() +
+   labs(title = 'Distribution of ACTION',
+        x = 'ACTION',
+        y = 'Count')
> 
> # Distribution of Action for the 15 Managers with most 0s
> ACTION0_managers <- train %>%
+   filter(ACTION == 0) %>%
+   group_by(MGR_ID) %>%
+   summarise(count = n()) %>%
+   arrange(desc(count)) %>%
+   head(15) %>%
+   pull(MGR_ID)
> 
> subset_train <- train %>%
+   filter(MGR_ID %in% ACTION0_managers)
> 
> ggplot(subset_train, aes(x = factor(MGR_ID), fill = factor(ACTION))) +
+   geom_bar(position = 'dodge', stat = 'count') +
+   labs(title = 'Managerial Impact on Resource Approval',
+        x = 'Manager ID',
+        y = 'Count',
+        fill = 'Approval Result') +
+   scale_fill_manual(values = c("0" = "red", "1" = "green")) 
> 
> # recipe ------------------------------------------------------------------
> 
> my_recipe <- recipe(ACTION ~ ., data = train) %>%
+   step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
+   step_other(all_nominal_predictors(), threshold = .01) %>%  # combines categorical values that occur <1% into an "other" value
+   step_dummy(all_nominal_predictors())  # dummy variable encoding
>   
> # apply the recipe to the data
> prepped_recipe <- prep(my_recipe)
> baked <- bake(prepped_recipe, new_data = train) # should have 112 columns
> baked
# A tibble: 32,769 × 112
   ACTION RESOURCE_X4675 RESOURCE_X25993 RESOURCE_X75078 RESOURCE_X79092
   <fct>           <dbl>           <dbl>           <dbl>           <dbl>
 1 1                   0               0               0               0
 2 1                   0               0               0               0
 3 1                   0               0               0               0
 4 1                   0               0               0               0
 5 1                   0               0               0               0
 6 0                   0               0               0               0
 7 1                   0               1               0               0
 8 1                   0               0               0               0
 9 1                   0               0               0               0
10 1                   0               0               0               0
# ℹ 32,759 more rows
# ℹ 107 more variables: RESOURCE_other <dbl>, MGR_ID_other <dbl>,
#   ROLE_ROLLUP_1_X117902 <dbl>, ROLE_ROLLUP_1_X117961 <dbl>,
#   ROLE_ROLLUP_1_X118212 <dbl>, ROLE_ROLLUP_1_X118290 <dbl>,
#   ROLE_ROLLUP_1_X118315 <dbl>, ROLE_ROLLUP_1_X118887 <dbl>,
#   ROLE_ROLLUP_1_X119062 <dbl>, ROLE_ROLLUP_1_other <dbl>,
#   ROLE_ROLLUP_2_X117962 <dbl>, ROLE_ROLLUP_2_X117969 <dbl>, …
> 
> # logistic regression ------------------------------------------------------
> 
> logistic_mod <- logistic_reg() %>% 
+   set_engine("glm")
> 
> logistic_workflow <- workflow() %>%
+   add_recipe(my_recipe) %>%
+   add_model(logistic_mod) %>%
+   fit(data = train) # Fit the workflow
> 
> predict_and_format(logistic_workflow, test, "./logistic_predictions.csv")
Warning message:
In predict.lm(object, newdata, se.fit, scale = 1, type = if (type ==  :
  prediction from rank-deficient fit; attr(*, "non-estim") has doubtful cases
> # private - 0.70429
> # public - 0.69688
> 
> # penalized logistic regression -------------------------------------------
> 
> penalized_logistic_mod <- logistic_reg(mixture = tune(),
+                                        penalty = tune()) %>% #Type of model
+   set_engine("glmnet")
> 
> target_encoding_recipe <- recipe(ACTION ~ ., train) %>%
+   step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
+   step_other(all_nominal_predictors(), threshold = .001) %>%  # combines categorical values that occur <1% into an "other" value
+   step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) # target encoding (must be 2-factor)
> 
> penalized_logistic_workflow <- workflow() %>%
+   add_recipe(target_encoding_recipe) %>%
+   add_model(penalized_logistic_mod)
> 
> ## Grid of values to tune over
> pen_tuning_grid <- grid_regular(penalty(),
+                             mixture(),
+                             levels = 5) ## L^2 total tuning possibilities
> 
> ## Split data for CV
> pen_folds <- vfold_cv(train, v = 5, repeats = 1)
> 
> ## Run the CV
> CV_results <- penalized_logistic_workflow %>%
+   tune_grid(resamples = pen_folds,
+             grid = pen_tuning_grid,
+             metrics = metric_set(roc_auc)) # f_meas, sens, recall, spec, precision, accuracy
> 
> ## Find Best Tuning Parameters
> pen_bestTune <- CV_results %>%
+   select_best("roc_auc")
> 
> ## Finalize the Workflow & fit it
> final_pen_wf <- penalized_logistic_workflow %>%
+   finalize_workflow(pen_bestTune) %>%
+   fit(data = train)
> 
> predict_and_format(final_pen_wf, test, "./penalized_logistic_predictions.csv")
> # private - 0.79081
> # public - 0.78364
> 
> 
> # random forests ----------------------------------------------------------
> 
> rand_forest_mod <- rand_forest(mtry = tune(),
+                       min_n=tune(),
+                       trees=500) %>% # or 1000
+   set_engine("ranger") %>%
+   set_mode("classification")
> 
> rand_forest_workflow <- workflow() %>%
+   add_recipe(target_encoding_recipe) %>%
+   add_model(rand_forest_mod)
> 
> rand_forest_tuning_grid <- grid_regular(mtry(range = c(1, (ncol(train)-1))),
+                                      min_n(),
+                                      levels = 5) ## L^2 total tuning possibilities
> 
> ## Split data for CV
> forest_folds <- vfold_cv(train, v = 5, repeats = 1)
> 
> ## Run the CV
> CV_results <- rand_forest_workflow %>%
+   tune_grid(resamples = forest_folds,
+             grid = rand_forest_tuning_grid,
+             metrics = metric_set(roc_auc)) # f_meas, sens, recall, spec, precision, accuracy
> 
> ## Find Best Tuning Parameters
> forest_bestTune <- CV_results %>%
+   select_best("roc_auc")
> 
> ## Finalize the Workflow & fit it
> final_forest_wf <- rand_forest_workflow %>%
+   finalize_workflow(forest_bestTune) %>%
+   fit(data = train)
> 
> predict_and_format(final_forest_wf, test, "./random_forest_predictions.csv")
> # private - 0.86376
> # public - 0.87344
> 
> 
> # naive bayes -------------------------------------------------------------
> 
> naive_bayes_model <- naive_Bayes(Laplace = tune(),
+                                  smoothness = tune()) %>% 
+   set_mode("classification") %>% 
+   set_engine("naivebayes") # install discrim library
> 
> 
> naive_bayes_wf <- workflow() %>% 
+   add_recipe(target_encoding_recipe) %>% 
+   add_model(naive_bayes_model)
> 
> # cross validation
> nb_tuning_grid <- grid_regular(Laplace(),
+                                smoothness(),
+                                 levels = 5)
> 
> ## Split data for CV
> nb_folds <- vfold_cv(train, v = 5, repeats = 1)
> 
> ## Run the CV
> CV_results <- naive_bayes_wf %>%
+   tune_grid(resamples = nb_folds,
+             grid = nb_tuning_grid,
+             metrics = metric_set(roc_auc)) # f_meas, sens, recall, spec, precision, accuracy
> 
> # find nest tuning parameters
> nb_bestTune <- CV_results %>%
+   select_best("roc_auc")
> 
> # finalize workflow
> final_nb_wf <- naive_bayes_wf %>%
+   finalize_workflow(nb_bestTune) %>%
+   fit(data = train)
> 
> predict_and_format(final_nb_wf, test, "./naive_bayes_predictions.csv")
> # private - 0.76438
> # public - 0.75864
> 
> # k-nearest neighbors -----------------------------------------------------
> 
> knn_model <- nearest_neighbor(neighbors=tune()) %>% # set or tune
+   set_mode("classification") %>%
+   set_engine("kknn")
> 
> knn_recipe <- recipe(ACTION ~ ., train) %>%
+   step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
+   step_other(all_nominal_predictors(), threshold = .001) %>%  # combines categorical values that occur <1% into an "other" value
+   step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) %>%  # target encoding (must be 2-factor)
+   step_normalize(all_nominal_predictors())
> 
> knn_workflow <- workflow() %>% 
+   add_recipe(knn_recipe) %>% 
+   add_model(knn_model)
> 
> # cross validation
> knn_tuning_grid <- grid_regular(neighbors(),
+                                levels = 5)
> 
> knn_folds <- vfold_cv(train, v = 5, repeats = 1)
> 
> ## Run the CV
> CV_results <- knn_workflow %>%
+   tune_grid(resamples = knn_folds,
+             grid = knn_tuning_grid,
+             metrics = metric_set(roc_auc))
> 
> knn_bestTune <- CV_results %>%
+   select_best("roc_auc")
> 
> # finalize workflow
> final_knn_wf <- knn_workflow %>%
+   finalize_workflow(knn_bestTune) %>%
+   fit(data = train)
> 
> predict_and_format(final_knn_wf, test, "./knn_predictions.csv")
> # private -
> # public - 
> 
> stopCluster(cl)
> 
> 
> 
> 
> proc.time()
   user  system elapsed 
291.915   4.948 595.720 
